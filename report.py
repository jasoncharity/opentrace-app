import os
import json
import openai
from dotenv import load_dotenv

load_dotenv()
openai.api_key = os.getenv("OPENAI_API_KEY")

# === Load subject data ===
def load_subject(filename="subject.json"):
    with open(filename, "r") as f:
        return json.load(f)

# === Load structured reports ===
def load_report(filename):
    if not os.path.exists(filename):
        print(f"⚠️  Skipping {filename} (not found)")
        return []
    with open(filename, "r") as f:
        return json.load(f)

subject = load_subject()

# === GPT Executive Summary ===
def generate_executive_summary(subject, sources):
    all_summaries = []
    for section in sources:
        for item in section:
            all_summaries.append(item.get("summary", ""))
    combined_text = "\n\n".join(all_summaries)

    prompt = f"""
    You are an intelligence analyst. Based on the following OSINT findings, write a formal executive summary of potential digital, reputational, and political risks associated with the subject: {subject['name']}.

    Focus on:
    - Reputational exposure
    - Notable incidents, affiliations, or controversies
    - Digital risk factors (e.g. data breaches)
    - Any perception-related issues

    Limit to 150–200 words. Be professional, concise, and avoid sensationalism.

    Findings:
    {combined_text}
    """

    response = openai.ChatCompletion.create(
        model="gpt-4",
        messages=[{"role": "user", "content": prompt}]
    )
    return response["choices"][0]["message"]["content"]

# === Format Markdown Sections ===
def format_section(title, items):
    section = f"\n## {title}\n"
    if not items:
        section += "_No findings available._\n"
        return section
    for i, item in enumerate(items, 1):
        section += f"\n### {i}. {item.get('title', item.get('breach', 'Untitled'))}\n"
        section += f"{item.get('summary', 'No summary available.')}\n"
        if "url" in item:
            section += f"[Source]({item['url']})\n"
        section += f"**Source Reliability**: {item.get('reliability', 'Unknown')}  \n"
        section += f"**Confidence**: {item.get('confidence', 'Not rated')}\n"
    return section

# === Load Report Sections ===
subject = load_subject()
news = load_report("report_newsapi.json")
hibp = load_report("report_hibp.json")
google = load_report("report_google_twitter.json")
reddit = load_report("report_reddit.json")  # Optional, if you've used Reddit

# === Helper Function ===
def format_subject_profile(subject):
    profile = f"""
**Name**: {subject.get('name', 'N/A')}  
**Date of Birth**: {subject.get('dob', 'N/A')}  
**Email**: {subject.get('email', 'N/A')}  
**Phone**: {subject.get('phone', 'N/A')}  
**Address**: {subject.get('address', 'N/A')}  
**Location**: {subject.get('location', 'N/A')}  
**Aliases**: {", ".join(subject.get('aliases', []))}  
**Affiliations**: {", ".join(subject.get('affiliations', []))}  
**Usernames**: {subject.get('usernames', 'N/A')}  
**Notes**: {subject.get('notes', '')}
"""
    return profile.strip()

# === Generate Executive Summary ===
summary = generate_executive_summary(subject, [news, hibp, google, reddit])
cleaned_summary = summary.replace("Executive Summary:", "").strip()

# === Build Full Markdown Report ===
report_md = f"# Protection Briefing: {subject['name']}\n"
report_md += "_Generated by OpenTrace Prototype_\n\n"
report_md += "## Subject Profile\n"
report_md += format_subject_profile(subject) + "\n"
report_md += "\n## Executive Summary\n"
report_md += cleaned_summary + "\n"

report_md += format_section("Media & News Coverage", news)
report_md += format_section("Breach Exposure (HIBP)", hibp)
print(f"✅ Google section has {len(google)} findings")
report_md += format_section("Mentions on Twitter (via Google Search)", google)
report_md += format_section("Mentions on Reddit", reddit)

# === Save as Markdown File ===
with open("protection_briefing.md", "w") as f:
    f.write(report_md)

print("✅ Final report with executive summary saved to protection_briefing.md")